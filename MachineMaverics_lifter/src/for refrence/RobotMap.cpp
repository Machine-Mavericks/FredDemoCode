// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<frc::SpeedController> RobotMap::driveBaseFrontLeft;
std::shared_ptr<frc::SpeedController> RobotMap::driveBaseFrontRight;
std::shared_ptr<frc::SpeedController> RobotMap::driveBaseBackLeft;
std::shared_ptr<frc::SpeedController> RobotMap::driveBaseBackRight;
std::shared_ptr<frc::RobotDrive> RobotMap::driveBaseRobotDrive41;
std::shared_ptr<frc::SpeedController> RobotMap::wristMotor;
std::shared_ptr<frc::AnalogPotentiometer> RobotMap::wristPot;
std::shared_ptr<frc::AnalogPotentiometer> RobotMap::elevatorPot;
std::shared_ptr<frc::SpeedController> RobotMap::elevatorMotor;
std::shared_ptr<frc::SpeedController> RobotMap::clawMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

void RobotMap::init() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    frc::LiveWindow *lw = frc::LiveWindow::GetInstance();

    driveBaseFrontLeft.reset(new frc::PWMVictorSPX(3));
    lw->AddActuator("DriveBase", "Front Left", std::static_pointer_cast<frc::PWMVictorSPX>(driveBaseFrontLeft));
    
    driveBaseFrontRight.reset(new frc::PWMVictorSPX(1));
    lw->AddActuator("DriveBase", "Front Right", std::static_pointer_cast<frc::PWMVictorSPX>(driveBaseFrontRight));
    
    driveBaseBackLeft.reset(new frc::PWMVictorSPX(4));
    lw->AddActuator("DriveBase", "Back Left", std::static_pointer_cast<frc::PWMVictorSPX>(driveBaseBackLeft));
    
    driveBaseBackRight.reset(new frc::PWMVictorSPX(2));
    lw->AddActuator("DriveBase", "Back Right", std::static_pointer_cast<frc::PWMVictorSPX>(driveBaseBackRight));
    
    driveBaseRobotDrive41.reset(new frc::RobotDrive(driveBaseFrontLeft, driveBaseBackLeft,
              driveBaseFrontRight, driveBaseBackRight));
    
    driveBaseRobotDrive41->SetSafetyEnabled(true);
        driveBaseRobotDrive41->SetExpiration(0.1);
        driveBaseRobotDrive41->SetSensitivity(0.5);	
        driveBaseRobotDrive41->SetMaxOutput(1.0);

    wristMotor.reset(new frc::Spark(0));
    lw->AddActuator("Wrist", "Motor", std::static_pointer_cast<frc::Spark>(wristMotor));
    
    wristPot.reset(new frc::AnalogPotentiometer(0, 1.0, 0.0));
    lw->AddSensor("Wrist", "Pot", wristPot);
    
    elevatorPot.reset(new frc::AnalogPotentiometer(1, 1.0, 0.0));
    lw->AddSensor("Elevator", "Pot", elevatorPot);
    
    elevatorMotor.reset(new frc::Spark(5));
    lw->AddActuator("Elevator", "Motor", std::static_pointer_cast<frc::Spark>(elevatorMotor));
    
    clawMotor.reset(new frc::Spark(6));
    lw->AddActuator("Claw", "Motor", std::static_pointer_cast<frc::Spark>(clawMotor));
    


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
